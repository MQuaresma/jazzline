param int KYBER_N = 256;
param int KYBER_Q = 3329;

fn _poly_csubq(reg ptr u16[KYBER_N] rp) -> reg ptr u16[KYBER_N]
{
  reg u16 t;
  reg u16 b;
  inline int i;

  for i=0 to KYBER_N
  {
    t = rp[i];
    t -= KYBER_Q;
    b = t;
    b >>s= 15;
    b &= KYBER_Q;
    t += b;
    rp[i] = t;
  }
  return rp;
}

fn _poly_compress_ref(reg u64 rp, reg ptr u16[KYBER_N] a) -> reg ptr u16[KYBER_N]
{
  reg u16 t;
  reg u32 d0, d1;
  reg u64 j;
  inline int i;

  a = _poly_csubq(a);

  j = 0;
  for i=0 to 128
  {
    t  = a[(int)j];
    d0 = (32u)t;
    d0 <<= 4;
    d0 += 1665;
    d0 *= 80635;
    d0 >>= 28;
    d0 &= 0xf;
    j += 1;
    t  = a[(int)j];
    d1 = (32u)t;
    d1 <<= 4;
    d1 += 1665;
    d1 *= 80635;
    d1 >>= 28;
    d1 &= 0xf;
    d1 <<= 4;
    d0 |= d1;
    (u8)[rp+i] = d0;
    j += 1;
  }
  return a;
}

export fn poly_compress_ref(reg u64 rp, reg u64 a) {
  reg u16 t;
  stack u16[KYBER_N] p;
  reg ptr u16[KYBER_N] pp;
  inline int i;

  for i=0 to KYBER_N {
      t = (u16)[a + 2*i];
      p[i] = t;
  }

  pp = p;
  pp = _poly_compress_ref(rp, pp);
}


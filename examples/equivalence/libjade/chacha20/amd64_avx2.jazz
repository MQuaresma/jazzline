
param int CHACHA_ROUNDS = 20;

/*

// the following is the implementation of rotate that can be found in libjade/libjc; 
// for simplicity at this state we reimplement it next;
// this means that stack u256 r16 r8 are never used, but they are kept in this file
//   to allow for a future update of rotate_v_avx2 implementation

inline fn __rotate_v_avx2(reg u256[16] k, inline int i r, stack u256 r16 r8) -> reg u256[16]
{
  reg u256 t;

  if(r==16){
    k[i] = #VPSHUFB_256(k[i], r16);

  } else { if (r==8) {
    k[i] = #VPSHUFB_256(k[i], r8);

  } else {
    t = k[i] <<8u32 r;
    k[i] = k[i] >>8u32 (32-r);
    k[i] ^= t;

  }}

  return k;
}
*/

inline fn __rotate_v_avx2(reg u256[16] k, inline int i r, stack u256 r16 r8) -> reg u256[16]
{
  reg u256 t;

  t = k[i] <<8u32 r;
  k[i] = k[i] >>8u32 (32-r);
  k[i] ^= t;

  return k;
}


inline fn __line_v_avx2(reg u256[16] k, inline int a b c r, stack u256 r16 r8) -> reg u256[16]
{
  k[a] +8u32= k[b];
  k[c] ^= k[a];
  k = __rotate_v_avx2(k, c, r, r16, r8);
  return k;
}

inline fn __double_line_v_avx2(
  reg u256[16] k,
  inline int a0 b0 c0 r0
             a1 b1 c1 r1,
  stack u256 r16 r8) -> reg u256[16]
{
  k[a0] +8u32= k[b0];
  k[a1] +8u32= k[b1];

  k[c0] ^= k[a0];
  k[c1] ^= k[a1];

  k = __rotate_v_avx2(k, c0, r0, r16, r8);
  k = __rotate_v_avx2(k, c1, r1, r16, r8);

  return k;
}

inline fn __double_quarter_round_v_avx2(reg u256[16] k,
                                        inline int a0 b0 c0 d0
                                                   a1 b1 c1 d1,
                                        stack u256 r16 r8) -> reg u256[16]
{
  k =         __line_v_avx2(k, a0, b0, d0, 16,                 r16, r8);
  k =  __double_line_v_avx2(k, c0, d0, b0, 12, a1, b1, d1, 16, r16, r8);
  k =  __double_line_v_avx2(k, a0, b0, d0, 8,  c1, d1, b1, 12, r16, r8);
  k =  __double_line_v_avx2(k, c0, d0, b0, 7,  a1, b1, d1, 8,  r16, r8);
  k =         __line_v_avx2(k,                 c1, d1, b1, 7,  r16, r8);

  return k;
}

inline fn __column_round_v_1_avx2(reg u256[16] k, stack u256 k15 s_r16 s_r8) -> reg u256[16], stack u256
{
  stack u256 k14;

  k = __double_quarter_round_v_avx2(k, 0, 4, 8,  12,
                                       2, 6, 10, 14, s_r16, s_r8);
  k[15] = k15;
  k14 = k[14];

  k = __double_quarter_round_v_avx2(k, 1, 5, 9,  13,
                                       3, 7, 11, 15, s_r16, s_r8);
  return k, k14;
}


inline fn __diagonal_round_v_1_avx2(reg u256[16] k, stack u256 k14 s_r16 s_r8) -> reg u256[16], stack u256
{
  stack u256 k15;

  k = __double_quarter_round_v_avx2(k, 1, 6, 11, 12,
                                       0, 5, 10, 15, s_r16, s_r8);
  k[14] = k14;
  k15 = k[15];

  k = __double_quarter_round_v_avx2(k, 2, 7, 8, 13,
                                       3, 4, 9, 14, s_r16, s_r8);
  return k, k15;
}


// __double_round_v_1_avx ~ __double_round_v_avx
inline fn __double_round_v_1_avx2(reg u256[16] k, stack u256 k15 r16 r8) -> reg u256[16], stack u256
{
  stack u256 k14;

  k, k14 = __column_round_v_1_avx2(k, k15, r16, r8);
  k, k15 = __diagonal_round_v_1_avx2(k, k14, r16, r8);
  return k, k15;
}


inline fn __rounds_v_avx2(reg u256[16] k, stack u256 r16 r8) -> reg u256[16]
{
  stack u256 k15;
  inline int round;

  k15 = k[15];

  for round=0 to (CHACHA_ROUNDS/2)
  { k, k15 = __double_round_v_1_avx2(k, k15, r16, r8); }

  k[15] = k15;

  return k;
}


//

export fn rounds_v_avx2(reg u64 kp)
{
  inline int i;

  reg u256[16] k;

  stack u256 r16 r8; // not used at the moment
  r16 = 0;
  r8 = 0;

  // load k
  for i=0 to 16
  { k[i] = (u256)[kp + i*32]; }

  // rounds
  k =  __rounds_v_avx2(k, r16, r8);

  // store k
  for i=0 to 16
  { (u256)[kp + i*32] = k[i]; }
}
